@page "/transactions/new-transaction"
@layout MainLayout
@inject HttpClient HttpClient

<PageTitle>Endava .NET Tech Course</PageTitle>

<AuthorizeView Roles="User">
    <MudText Typo="Typo.h4" Class="mb-4" GutterBottom="true">Transfera Fonduri</MudText>

    <MudGrid>
        @if (wallets is null || !wallets.Any())
        {
            <MudAlert>Pentru a putea efectua o tranzactie aveti nevoie de portofele active</MudAlert>
        }
        else
        {
            <MudItem md="12">
                <MudGrid>
                    <MudItem md="2">
                        <MudText Typo="Typo.h6">Portfelul sursa:</MudText>
                    </MudItem>
                    <MudItem md="4">
                        <MudSelect Margin="Margin.Dense" T="string" Variant="Variant.Outlined" @bind-Value="newTransaction.SourceId">
                            @foreach (var wallet in wallets)
                            {
                                <MudSelectItem Value="wallet.Id">@wallet.Code</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                </MudGrid>
            </MudItem>

            <MudItem md="12">
                <MudGrid>
                    <MudItem md="2">
                        <MudText Typo="Typo.h6">Selectare destinatar:</MudText>
                    </MudItem>
                    <MudItem md="4">
                        <MudRadioGroup @bind-SelectedOption="newTransaction.TargetSearchMethod">
                            <MudRadio Option="TargetSearchMethod.ByWalletCode" Color="Color.Primary" Dense="true">Cod portofel</MudRadio>
                            <MudRadio Option="TargetSearchMethod.ByEmail" Color="Color.Secondary" Dense="false">Email</MudRadio>
                        </MudRadioGroup>
                    </MudItem>
                </MudGrid>
            </MudItem>

            <MudItem md="12">
                <MudGrid>
                    <MudItem md="2"/>
                    <MudItem md="4">
                        <MudTextField @bind-Value="newTransaction.TargetSearchTerm"/>
                    </MudItem>
                </MudGrid>
            </MudItem>

            <MudItem md="12">
                <MudGrid>
                    <MudItem md="2">
                        <MudText Typo="Typo.h6">Suma:</MudText>
                    </MudItem>
                    <MudItem md="3">
                        <MudNumericField HideSpinButtons="true" @bind-Value="newTransaction.Amount" Variant="Variant.Outlined" Step=".2M"/>
                    </MudItem>
                    <MudItem md="1">
                        <MudSelect T="string" @bind-Value="newTransaction.CurrencyId" Label="Valuta" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                            @foreach (var currency in currencies)
                            {
                                <MudSelectItem T="string" Value="currency.Id">@currency.Code</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                </MudGrid>
            </MudItem>

            <MudItem md="12">
                <MudGrid>
                    <MudItem md="2">
                        <MudText Typo="Typo.h6">Comision:</MudText>
                    </MudItem>
                    <MudItem md="4">
                        <MudText Typo="Typo.h6">@($"{GetTransactionFee()} {GetSourceCurrency()}")</MudText>
                    </MudItem>
                </MudGrid>
            </MudItem>
            <MudItem md="12">
                <MudGrid>
                    <MudItem md="2">
                        <MudText Typo="Typo.h6">Total:</MudText>
                    </MudItem>
                    <MudItem md="4">
                        <MudText Typo="Typo.h6">@($"{GetTransactionTotal()} {GetSourceCurrency()}")</MudText>
                    </MudItem>
                </MudGrid>
            </MudItem>

            <MudItem md="12">
                <MudGrid>
                    <MudItem md="2">
                        <MudText Typo="Typo.h6">Descriere:</MudText>
                    </MudItem>
                    <MudItem md="4">
                        <MudTextField @bind-Value="newTransaction.Description" Variant="Variant.Outlined"/>
                    </MudItem>
                </MudGrid>
            </MudItem>

            <MudItem md="12">
                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@CreateTransaction">Transfera</MudButton>
            </MudItem>
            <MudItem md="12">
                @if (error != string.Empty)
                {
                    <MudAlert>@error</MudAlert>
                }
            </MudItem>
        }
    </MudGrid>
</AuthorizeView>

@code {
    private IEnumerable<CurrencyDto> currencies;
    private IEnumerable<WalletDto> wallets;
    private TransactionDto newTransaction = new();
    private string error = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await GetWallets();
        await GetCurrencies();

        StateHasChanged();

        await base.OnInitializedAsync();
    }

    private async Task GetWallets()
    {
        wallets = await HttpClient.GetFromJsonAsync<List<WalletDto>>("api/wallets");
    }

    private async Task GetCurrencies()
    {
        currencies = await HttpClient.GetFromJsonAsync<List<CurrencyDto>>("api/currencies");
    }

    private decimal GetTransactionFee()
    {
        var wallet = wallets.FirstOrDefault(x => x.Id == newTransaction.SourceId);
        if (wallet is null)
            return 0;
        var walletCurrency = currencies.FirstOrDefault(x => x.Id == wallet?.CurrencyId);
        if (walletCurrency is null)
            return 0;
        var transactionCurrency = currencies.FirstOrDefault(x => x.Id == newTransaction.CurrencyId);
        if (transactionCurrency is null)
            return 0;
        return Math.Round(newTransaction.Amount * transactionCurrency.ChangeRate / walletCurrency.ChangeRate * wallet.TransactionFee / 100, 2);
    }

    private decimal GetTransactionTotal()
    {
        var wallet = wallets.FirstOrDefault(x => x.Id == newTransaction.SourceId);
        if (wallet is null)
            return 0;
        var walletCurrency = currencies.FirstOrDefault(x => x.Id == wallet?.CurrencyId);
        if (walletCurrency is null)
            return 0;
        var transactionCurrency = currencies.FirstOrDefault(x => x.Id == newTransaction.CurrencyId);
        if (transactionCurrency is null)
            return 0;
        return Math.Round(newTransaction.Amount * transactionCurrency.ChangeRate / walletCurrency.ChangeRate + GetTransactionFee(), 2);
    }

    private string GetSourceCurrency()
    {
        var wallet = wallets.FirstOrDefault(x => x.Id == newTransaction.SourceId);
        return currencies.FirstOrDefault(x => x.Id == wallet?.CurrencyId)?.Code;
    }

    private async Task CreateTransaction()
    {
        if (string.IsNullOrEmpty(newTransaction.SourceId))
        {
            error = "Pentru a efectua o tranzactie trebuie sa alegeti un portofel sursa.";
            return;
        }
        if (newTransaction.TargetSearchMethod == TargetSearchMethod.None
            || string.IsNullOrEmpty(newTransaction.TargetSearchTerm))
        {
            error = "Pentru a efectua o tranzactie trebuie sa alegeti un destinatar.";
            return;
        }
        if (newTransaction.Amount <= 0)
        {
            error = "Suma transferului trebuie sa fie mai mare ca 0";
            return;
        }

        newTransaction.TransactionType = "P2P";
        var result = await HttpClient.PostAsJsonAsync("api/transactions", newTransaction);

        if (result.IsSuccessStatusCode)
        {
            await GetWallets();
            newTransaction = new TransactionDto();
            error = string.Empty;
        }
        else
            error = await result.Content.ReadAsStringAsync();
        StateHasChanged();
    }

}
