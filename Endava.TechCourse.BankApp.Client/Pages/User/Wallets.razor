@page "/wallets"
@layout MainLayout
@inject HttpClient HttpClient

<PageTitle>Endava .NET Tech Course</PageTitle>

<MudGrid>
    <MudItem md="12">
        <MudText Typo="Typo.h4" GutterBottom="true">Portofele existente</MudText>
    </MudItem>
    @if (wallets is null || !wallets.Any())
    {
        <MudItem md="12">
            <MudAlert Severity="Severity.Info">La moment nu aveti nici un portofel.</MudAlert>
        </MudItem>
    }
    else
    {
        foreach (var wallet in wallets)
        {
            <MudItem md="3">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">@walletTypes.FirstOrDefault(x => x.Id == wallet.WalletTypeId)?.Name</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            @if (wallet.IsMain)
                            {
                                <MudIconButton Color="Color.Success" Icon="@Icons.Material.Filled.Bookmark"/>
                            }
                            else
                            {
                                <MudIconButton Color="Color.Default" Icon="@Icons.Material.Filled.BookmarkBorder"
                                               OnClick="async () => await SetMainWallet(wallet)"/>
                            }
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText>Balanta contului : @wallet.Amount</MudText>
                        <MudText>Valuta - @currencies.FirstOrDefault(x => x.Id == wallet.CurrencyId)?.Code</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    }
    <MudItem md="12">
        <MudText Typo="Typo.h5" GutterBottom="true">Creare portofel :</MudText>
    </MudItem>
    @if (currencies is null || !currencies.Any())
    {
        <MudAlert>Nu puteti crea un portofel nou deoarece nu exista valute disponibile</MudAlert>
    }
    else
    {
        <MudItem md="2">
            <MudSelect T="string" @bind-Value="newWallet.WalletTypeId" Label="Tip" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                @foreach (var walletType in walletTypes)
                {
                    <MudSelectItem T="string" Value="walletType.Id">@walletType.Name</MudSelectItem>
                }
            </MudSelect>
        </MudItem>

        <MudItem md="2">
            <MudNumericField @bind-Value="newWallet.Amount" Label="Suma" Required="true"/>
        </MudItem>

        <MudItem md="2">
            <MudSelect T="string" @bind-Value="newWallet.CurrencyId" Label="Valuta" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                @foreach (var currency in currencies)
                {
                    <MudSelectItem T="string" Value="currency.Id">@currency.Code</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem md="1">
            <MudButton Class="mt-4" Variant="Variant.Filled" Color="Color.Primary" OnClick="@AddWallet">Adauga</MudButton>
        </MudItem>
        <MudItem md="2">
            @if (newWalletError != string.Empty)
            {
                <MudAlert>@newWalletError</MudAlert>
            }
        </MudItem>
    }
</MudGrid>


@code {
    private IEnumerable<WalletDto> wallets;
    private IEnumerable<WalletTypeDto> walletTypes;

    private IEnumerable<CurrencyDto> currencies;
    private WalletDto newWallet = new();
    private string newWalletError = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await GetWallets();
        await GetCurrencies();
        await GetWalletTypes();

        StateHasChanged();

        await base.OnInitializedAsync();
    }

    public async Task GetWallets()
    {
        wallets = await HttpClient.GetFromJsonAsync<List<WalletDto>>("api/wallets");
    }

    public async Task GetCurrencies()
    {
        currencies = await HttpClient.GetFromJsonAsync<List<CurrencyDto>>("api/currencies");
    }

    public async Task GetWalletTypes()
    {
        walletTypes = await HttpClient.GetFromJsonAsync<List<WalletTypeDto>>("api/walletTypes");
    }

    public async Task AddWallet()
    {
        if (string.IsNullOrEmpty(newWallet.CurrencyId))
            newWalletError += "Un portofel nu poate fi creat fara a alege o valuta.";
        else
        {
            newWalletError += $"{newWallet}";

            var result = await HttpClient.PostAsJsonAsync("api/wallets", newWallet);

            if (!result.IsSuccessStatusCode)
                newWalletError = await result.Content.ReadAsStringAsync();
            else
            {
                await GetWallets();
                newWallet = new WalletDto();
                newWalletError = string.Empty;
            }
        }

        StateHasChanged();
    }

    public async Task SetMainWallet(WalletDto wallet)
    {
        var result = await HttpClient.PostAsync($"api/wallets/setMainWallet/{wallet.Id}", null);
        if (result.IsSuccessStatusCode)
            await GetWallets();
    }

}
